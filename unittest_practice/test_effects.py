import unittest
from pathlib import Path
from unittest.mock import patch

from PIL import Image

from playground import effects

# Establish test files / directories.
IMAGES_DIR = Path(__file__).parent / 'images'
IMAGE_FILE = IMAGES_DIR / 'python_logo.png'
# The following hash was generated by calling:
# with open(IMAGE_FILE, 'rb') as img:
#     file_id(Image.open(img).tobytes())
IMAGE_HASH = 'f33eeefbf46cd12d31f6bc422b7f9d9488fd686ada7b07f75ec5740d'


class Effects(unittest.TestCase):


    def test_file_id(self):
        # Does the function return the expected hash for raw bytes?
        # The below hardcoded hash was externally generated using the
        # search engine DuckDuckGo.
        # https://duckduckgo.com/?q=sha224+hash+**********
        #
        # data: **********
        # hash: 8c3f7ebcb1f36d1b42eeaee8aaaaf2bc0906f90c074b92e3873eb2f2

        ###############################################################################
        #
        # Test Requirements (effects.file_id):
        #
        # The file_id function is responsible for generating a sha224 hash for the provided bytes.
        # The generated hash becomes a fingerprint for a given file.
        #
        # 1.) Ensure that repeated calls to the file_id method using the same input return the same file id.
        # 2.) Ensure that input types other than bytes raise a TypeError
        ###############################################################################
        assert effects.file_id(b'**********') == '8c3f7ebcb1f36d1b42eeaee8aaaaf2bc0906f90c074b92e3873eb2f2'
        # Does the function raise for non byte strings?
        self.assertRaises(TypeError, effects.file_id, '**********')
        # Does the function return the expected hash for an actual image?
        with open(IMAGE_FILE, 'rb') as img:
            assert effects.file_id(Image.open(img).tobytes()) == IMAGE_HASH



    def test_file_save(self):
        ###############################################################################
        #
        # Test Requirements (effects.save):
        #
        # The save function is responsible for saving an image (PIL.Image.Image) to the specified directory.
        #
        # 1.) Call the effects.save function with the following arguments:
        #     - A PIL.Image.Image object based on the IMAGE_FILE.
        #     - The png extension.
        #     - The IMAGES_DIR directory.
        # 2.) Ensure that returned filenames match the expected auto generated hash followed by the extension.
        #       - Example: f'{IMAGE_HASH}.png'
        ###############################################################################
        # Add test code below
        img = Image.open(IMAGE_FILE)
        filename = effects.save(img, "png", IMAGES_DIR)
        # Ensure returned filename matches expected hash
        self.assertEqual(filename, f"{IMAGE_HASH}.png")
        # Ensure file is actually saved
        self.assertTrue((IMAGES_DIR / filename).exists())
        # End test code
        ###############################################################################

    @patch('playground.effects.Image')
    @patch('playground.effects.ImageFilter')
    def test_blur(self, image_filter, image_module):
        ###############################################################################
        #
        # Test Requirements (effects.blur):
        #
        # The blur function is responsible for applying a blur effect to an image.
        # Use the provided patches to meet the following requirements.
        #
        # 1.) Call the effects.blur function with the following arguments:
        #     - A PIL.Image.Image object based on the IMAGE_FILE.
        #     - A keyword argument:
        #       - radius = 100
        # 2.) Ensure the playground.effects.Image module calls its open callable with the provided PIL.Image.Image object.
        # 3.) Ensure the playground.effects.ImageFilter module calls BoxBlur with the provided blur radius.
        # 4.) Ensure the object returned from playground.effects.Image.open calls its filter method and
        #     passes the object returned from calling BoxBlur as its argument.
        ###############################################################################
        # Add test code below
        # Mock objects
        mock_img = image_module.open.return_value
        mock_filter_obj = image_filter.BoxBlur.return_value

        # Call function under test
        effects.blur(IMAGE_FILE, radius=100)

        # Assertions
        image_module.open.assert_called_once_with(IMAGE_FILE)
        image_filter.BoxBlur.assert_called_once_with(100)
        mock_img.filter.assert_called_once_with(mock_filter_obj)
        # End test code
        ###############################################################################

    @patch('playground.effects.Image')
    @patch('playground.effects.ImageFilter')
    def test_mode(self, image_filter, image_module):
        ###############################################################################
        #
        # Test Requirements (effects.mode):
        #
        # The mode function is responsible for applying an effect to an image.
        # Use the provided patches to meet the following requirements.
        #
        # 1.) Call the effects.mode function with the following arguments:
        #     - A PIL.Image.Image object based on the IMAGE_FILE.
        #     - A keyword argument:
        #       - size = 100
        # 2.) Ensure the playground.effects.Image module calls its open callable with the provided PIL.Image.Image object.
        # 3.) Ensure the playground.effects.ImageFilter module calls ModeFilter with a provided pixel square size.
        # 4.) Ensure the object returned from playground.effects.Image.open calls its filter method and
        #     passes the object returned from calling ModeFilter as its argument.
        ###############################################################################
        # Add test code below
        # Mock objects
        mock_img = image_module.open.return_value
        mock_filter_obj = image_filter.ModeFilter.return_value

        # Call function under test
        effects.mode(IMAGE_FILE, size=100)

        # Assertions
        image_module.open.assert_called_once_with(IMAGE_FILE)
        image_filter.ModeFilter.assert_called_once_with(100)
        mock_img.filter.assert_called_once_with(mock_filter_obj)
        # End test code
        ###############################################################################

    def test_effect_on_non_images(self):
        ###############################################################################
        #
        # Test Requirements (effects.blur and effects.mode):
        #
        # The blur and mode functions raise an effects.InvalidImageError exception for non-image files
        #
        # 1.) Ensure that non-image files raise an `InvalidImageError` exception for both the
        #     blur and mode functions.
        #     - Path(__file__) makes a useful non-image file.
        ###############################################################################
        # Add test code below
        # Non-image file
        fake_file = Path(__file__)

        # blur should raise InvalidImageError
        with self.assertRaises(effects.InvalidImageError):
            effects.blur(fake_file)

        # mode should raise InvalidImageError
        with self.assertRaises(effects.InvalidImageError):
            effects.mode(fake_file)
        # End test code
        ###############################################################################

